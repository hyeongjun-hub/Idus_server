<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.cart.CartMapper">

    <select id="checkCart" parameterType="int" resultType="int">
        select exists(select userId from Cart where userId = #{userId} and status = 'Y')
    </select>

    <select id="getCartId" parameterType="int" resultType="int">
        select cartId from Cart where userId = #{userId} and status = 'Y'
    </select>

    <insert id="createCart" parameterType="PostCreateCartReq">
        insert into Cart (userId, isDirectOrder) values (#{userId}, #{isDirectOrder})
        <selectKey keyProperty="cartId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <insert id="createSmallCart" parameterType="PostSmallCartReq">
        insert into SmallCart (cartId, productId, count, price, deliveryTip, request) values (#{cartId}, #{productId}, #{count}, #{price}, #{deliveryTip}, '');
        <selectKey keyProperty="smallCartId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateCartPrice" parameterType="int">
        update Cart set priceAll = priceAll + ${price} where cartId = #{cartId}
    </update>

    <update id="updateDeliveryTip" parameterType="int">
        update Cart set deliveryTipAll = deliveryTipAll + ${deliveryTip} where cartId = #{cartId}
    </update>

    <insert id="createOrderDetail" parameterType="int">
        insert into OrderDetail (productOptionId, smallCartId) values (#{productOptionId}, #{smallCartId});
        <selectKey keyProperty="smallCartId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="getCart" parameterType="int" resultType="GetCartRes">
        select cartId, priceAll, deliveryTipAll from Cart where userId = #{userId} and status='Y'
    </select>

    <select id="getSmallCart" parameterType="int" resultType="GetSmallCartRes">
        select smallCartId,
               makerName,
               thumbnailImageUrl,
               productName,
               amount,
               IFNULL((select group_concat(distinct ProductOption.content separator '\n')
                from ProductOption
                         inner join OrderDetail OD on ProductOption.productOptionId = OD.productOptionId
                         inner join SmallCart SC on OD.smallCartId = SC.smallCartId
                where SC.smallcartId = SmallCart.smallCartId), '') as productOption,
               SmallCart.price,
               count,
               SmallCart.deliveryTip,
               tipFreeMin,
               request
        from SmallCart
                 inner join Product P on SmallCart.productId = P.productId
                 inner join Maker M on P.makerId = M.makerId
        where cartId = #{cartId} and SmallCart.status = 'Y'
    </select>

    <select id="getUserId" parameterType="PatchCartReq" resultType="int">
        select userId from Cart where cartId = #{cartId}
    </select>

    <select id="getCartStatus" parameterType="PatchCartReq" resultType="String">
        select Cart.status from Cart where cartId = #{cartId}
    </select>

    <select id="getSmallCartStatus" parameterType="int" resultType="String">
        select SmallCart.status from SmallCart where smallCartId = #{smallCartId}
    </select>

    <update id="editCount" parameterType="PatchCartReq">
        update SmallCart set count = #{count}, price = #{price} where smallCartId = #{smallCartId}
    </update>

    <select id="getOnePrice" parameterType="int" resultType="int">
        select ROUND(price / SmallCart.count, -1) as price
        from SmallCart
        where smallCartId = #{smallCartId}
    </select>

    <select id="getPriceByCount" parameterType="int" resultType="int">
        select #{onePrice} * SmallCart.count as price
        from SmallCart
                 inner join Product P on SmallCart.productId = P.productId
        where smallCartId = #{smallCartId}
    </select>

    <update id="updateCartPriceByCount" parameterType="int">
        update Cart set priceAll = priceAll - #{originalPrice} + #{price} where cartId = #{cartId}
    </update>

    <update id="editRequest" parameterType="PatchCartReq">
        update SmallCart set request = #{request} where smallCartId = #{smallCartId}
    </update>

    <select id="getUserIdBySmallCartId" parameterType="int" resultType="int">
        select U.userId
        from SmallCart
                 inner join Cart C on SmallCart.cartId = C.cartId
                 inner join User U on C.userId = U.userId
        where SmallCart.smallCartId = #{smallCartId}
    </select>

    <select id="getPrice" parameterType="int" resultType="int">
        select price from SmallCart where smallCartId = #{smallCartId}
    </select>


    <select id="getDeliveryTip" parameterType="int" resultType="int">
        select deliveryTip from SmallCart where smallCartId = #{smallCartId}
    </select>

    <update id="delCart" parameterType="int">
        Update SmallCart set status = 'D' where SmallCartId = #{smallCartId}
    </update>

    <update id="updateCartDeliveryTip" parameterType="int">
        Update Cart set deliveryTipAll = deliveryTipAll + #{deliveryTip} where cartId = #{cartId}
    </update>

    <select id="checkSmallCart" parameterType="int" resultType="int">
        select exists(select smallCartId from SmallCart where cartId = #{cartId} and SmallCart.status = 'Y')
    </select>

    <update id="cleanCart" parameterType="int">
        Update Cart set priceAll=0 , deliveryTipAll=0 where cartId = #{cartId}
    </update>
</mapper>
