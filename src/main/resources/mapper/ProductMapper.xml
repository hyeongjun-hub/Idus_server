<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.product.ProductMapper">
    <select id="getTodayProducts" resultType="GetTodayRes">
        select Product.productId,
               IFNULL(productName, "") productName,
               thumbnailImageUrl,
               IFNULL((select AVG(star) from Review where Product.productId = Review.productId), 0) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review
        from Product
        where Product.status = 'Y'
        ORDER BY RAND()
    </select>

    <select id="getLiveProducts" resultType="GetLiveRes">
        select Product.productId,
               IFNULL(productName, "") as productName,
               IFNULL(makerName, "") as makerName,
               IFNULL(thumbnailImageUrl, "") as thumbnailImageUrl,
               (select AVG(star) from Review where Product.productId = Review.productId) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review,
       TIMESTAMP(OL.updatedAt) date
        from Product
            left join Review R on Product.productId = R.productId
            inner join Maker M on Product.makerId = M.makerId
            left join OrderList OL on R.orderListId = OL.orderListId
        where Product.status = 'Y'
        group by Product.productId ORDER BY date DESC
    </select>

    <select id="getNewProducts" resultType="GetNewRes">
        select Product.productId,
               productName,
               makerName,
               IFNULL(thumbnailImageUrl, "") as thumbnailImageUrl,
            TIMESTAMP (Product.createdAt) as date
        from Product
            inner join Maker M on Product.makerId = M.makerId
        where Product.status = 'Y'
        ORDER BY date DESC
    </select>

    <select id="getTodayMore" resultType="GetProductRes">
        select Product.productId,
               Product.categoryId,
               productName,
               makerName,
               IFNULL(thumbnailImageUrl, "") as thumbnailImageUrl,
               price,
               discountRate,
               tag,
               (select AVG(star) from Review where Product.productId = Review.productId) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review,
                vip
        from Product
            inner join Maker M on Product.makerId = M.makerId
        where Product.status = 'Y'
        ORDER BY RAND()
    </select>

    <select id="getCategoryProducts" parameterType="int" resultType="GetProductRes">
        select Product.productId,
               Product.categoryId,
               productName,
               makerName,
               IFNULL(thumbnailImageUrl, "") as thumbnailImageUrl,
               price,
               discountRate,
               tag,
               (select AVG(star) from Review where Product.productId = Review.productId) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review,
                vip
        from Product
            inner join Maker M on Product.makerId = M.makerId
        where categoryId = #{categoryId} and Product.status = 'Y'
    </select>

    <select id="getSearchProducts" parameterType="String" resultType="GetProductRes">
        select Product.productId,
               Product.categoryId,
               productName,
               makerName,
               IFNULL(thumbnailImageUrl, '') as thumbnailImageUrl,
               price,
               discountRate,
               tag,
               (select AVG(star) from Review where Product.productId = Review.productId) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review,
                vip
        from Product
            inner join Maker M on Product.makerId = M.makerId
        where productName like '%${word}%' or makerName like '%${word}%' and Product.status = 'Y'
    </select>

    <select id="getProductDetail" parameterType="int" resultType="GetDetailRes">
        select Product.productId,
               Product.categoryId,
               makerName,
               productName,
               IFNULL(thumbnailImageUrl, '') thumbnailImageUrl,
               price,
               discountRate,
               tag,
               (select AVG(star) from Review where Product.productId = Review.productId)   as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               (select COUNT(distinct orderListId)
                from OrderList
                         inner join Cart C on OrderList.cartId = C.cartId
                         inner join SmallCart SC on C.cartId = SC.cartId
                         inner join OrderDetail OD on SC.smallCartId = OD.smallCartId
                         inner join ProductOption PO on OD.productOptionId = PO.productOptionId
                         inner join Product P on PO.productId = P.productId
                where PO.productId = P.productId)                                           as orderCount,
               deliveryTip,
               tipFreeMin,
               amount,
               IFNULL(productInfo, '') productInfo
        from Product
                 inner join Maker M on Product.makerId = M.makerId
        where Product.productId = #{productId}
    </select>

    <select id="getProductReviews" parameterType="int" resultType="Review">
        select R.reviewId,
               U.userId,
               userName,
               R.updatedAt updateDate,
               IFNULL(profileImageUrl, "") profileImageUrl,
               star,
               IFNULL(imageUrl, "") imageUrl,
               IFNULL(R.content, "") content,
               IFNULL((select group_concat(distinct ProductOption.content separator ' ')
                       from ProductOption
                                inner join OrderDetail OD on ProductOption.productOptionId = OD.productOptionId
                                inner join Product P on ProductOption.productId = P.productId
                                inner join Review R on P.productId = R.productId
                       where R.productId = 1), '') as productOption
        from Review R
                 inner join OrderList OL on R.orderListId = OL.orderListId
                 inner join Cart C on OL.cartId = C.cartId
                 inner join User U on C.userId = U.userId
        where R.productId = #{productId}
    </select>

    <select id="getProductKeywords" parameterType="int" resultType="String">
        select IFNULL(productKeyword, '') as productKeyword
        from ProductKeyword
        where ProductKeyword.productId = #{productId} and status = 'Y'
    </select>

    <select id="getProductComments" parameterType="int" resultType="com.example.demo.src.product.model.entity.Comment">
        select IFNULL(content, '') as content
        from Comment
        where productId = #{productId} and status = 'Y'
    </select>

    <select id="getMakerInfo" parameterType="int" resultType="com.example.demo.src.product.model.entity.Maker">
        select Product.makerId,
               IFNULL(makerProfileImageUrl, '') makerProfileImageUrl,
               makerName,
               IFNULL((select AVG(star)
                       from OrderList OL
                                inner join Review on Review.orderListId = OL.orderListId
                                inner join Cart C on OL.cartId = C.cartId
                                inner join SmallCart SC on C.cartId = SC.cartId
                                inner join OrderDetail OD on SC.smallCartId = OD.smallCartId
                                inner join ProductOption PO on OD.productOptionId = PO.productOptionId
                                inner join Product P on PO.productId = P.productId
                                inner join Maker M on P.makerId = M.makerId
                       where M.makerId = Product.makerId
                       group by P.productId), 0)   as star,
               (select Count(star)
                from OrderList OL
                         inner join Review on Review.orderListId = OL.orderListId
                         inner join Cart C on OL.cartId = C.cartId
                         inner join SmallCart SC on C.cartId = SC.cartId
                         inner join OrderDetail OD on SC.smallCartId = OD.smallCartId
                         inner join ProductOption O on OD.productOptionId = O.productOptionId
                         inner join Product P on O.productId = P.productId
                         inner join Maker M on P.makerId = M.makerId
                where M.makerId = Product.makerId
                group by P.productId)              as reviewCount,
               (select Count(likeListId)
                from LikeList
                         inner join Product P on LikeList.productId = P.productId
                         inner join Maker M on P.makerId = M.makerId
                where M.makerId = Product.makerId) as likeCount,
               (select Count(followId)
                from Follow
                where makerId = Product.makerId)   as followCount,
               (select Count(supportId)
                from Support
                where makerId = Product.makerId)   as supportCount,
               M.profileDetail
        from Product
                 inner join Maker M on Product.makerId = M.makerId
        where Product.productId = #{productId}
    </select>

    <select id="getOptionInit" parameterType="int" resultType="GetOptionRes">
        select distinct title, productId
        from ProductOption
        where productId = #{productId}
    </select>

    <select id="getOptionTitle" parameterType="int" resultType="String">
        select distinct title
        from ProductOption
        where productId = #{productId}
    </select>

    <select id="getOptionInfo" parameterType="GetOptionReq" resultType="GetOptionDetailRes">
        select productOptionId,
               IFNULL(content, '') content,
               addPrice
        from ProductOption
        where title = #{title} and productId = #{productId}
    </select>

    <insert id="addView" parameterType="int">
        insert View (userId, productId) VALUES (#{userId}, #{productId});
    </insert>

    <update id="updateUserResent" parameterType="int">
        update User set productId = #{productId} where userId = #{userId}
    </update>
</mapper>
