<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.order.OrderMapper">
    <select id="getCartStatus" parameterType="int" resultType="String">
        select status from Cart where cartId = #{cartId}
    </select>

    <select id="getSmallCartStatus" parameterType="int" resultType="String">
        select status from SmallCart where smallCartId = #{smallCartId}
    </select>

    <insert id="createOrder" parameterType="PostOrderReq">
        insert into OrderList (cartId, paymentMethodId, taker, phone, address, usePoint, isSupport, priceSum, finalPrice, isProtectNum, rewardPoint)
        values
        (#{cartId}, #{paymentMethodId}, #{taker}, #{phone}, #{address}, #{usePoint}, #{isSupport}, #{priceSum}, #{finalPrice}, #{isProtectNum}, #{rewardPoint});
        <selectKey keyProperty="orderListId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateCartStatus" parameterType="int">
        update Cart
        set status = 'N'
        where cartId = #{cartId};
    </update>

    <update id="updateSmallCartStatus" parameterType="int">
        update SmallCart
        set status = 'N'
        where smallCartId = #{smallCartId};
    </update>

    <update id="updateCouponStatus" parameterType="int">
        update Coupon
        set status = 'N'
        where couponId = #{couponId};
    </update>

    <update id="updatePoint" parameterType="int">
        update User set point = point + #{point} where userId = #{userId}
    </update>

    <select id="getOrders" parameterType="int" resultType="GetOrderRes">
        select distinct OrderList.orderListId as orderListId, (IfNULL(M.price,0) + IFNULL(AM.price, 0)) as price, OD.amount, restaurantName, menuName, additionalMenuName, finalPrice, DATE_FORMAT(OrderList.createdAt, '%Y년 %m월 %d일 %p %l:%s')as createdAt, deliveryAddress, restaurantPhoneNumber, request, toRider, spoon, address, phoneNumber from OrderList inner join PaymentMethod PM on OrderList.paymentMethodId = PM.paymentMethodId inner join UserCart UC on OrderList.userCartID = UC.userCartId inner join OrderDetail OD on UC.userCartId = OD.userCartId left join Menu M on OD.menuId = M.menuId left join AdditionalMenu AM on OD.additionalMenuId = AM.additionalMenuId left join BigMenu BM on M.bigMenuId = BM.bigMenuId inner join Address A on OrderList.addressId = A.addressId left join Restaurant R on BM.restaurantId = R.restaurantId inner join User U on UC.userId = U.userId where OrderListId = #{orderListId}
    </select>

    <select id="getOrder" parameterType="int" resultType="GetOrderDetailRes">
        select distinct OrderList.orderListId as orderListId, (IfNULL(M.price,0) + IFNULL(AM.price, 0)) as price, OD.amount, restaurantName, menuName, additionalMenuName, finalPrice, DATE_FORMAT(OrderList.createdAt, '%Y년 %m월 %d일 %p %l:%s')as createdAt, deliveryAddress, restaurantPhoneNumber, request, toRider, spoon, address, phoneNumber from OrderList inner join PaymentMethod PM on OrderList.paymentMethodId = PM.paymentMethodId inner join UserCart UC on OrderList.userCartID = UC.userCartId inner join OrderDetail OD on UC.userCartId = OD.userCartId left join Menu M on OD.menuId = M.menuId left join AdditionalMenu AM on OD.additionalMenuId = AM.additionalMenuId left join BigMenu BM on M.bigMenuId = BM.bigMenuId inner join Address A on OrderList.addressId = A.addressId left join Restaurant R on BM.restaurantId = R.restaurantId inner join User U on UC.userId = U.userId where OrderListId = #{orderListId}
    </select>
</mapper>
