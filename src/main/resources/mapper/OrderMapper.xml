<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.order.OrderMapper">
    <select id="getCartStatus" parameterType="int" resultType="String">
        select status from Cart where cartId = #{cartId}
    </select>

    <select id="getSmallCartStatus" parameterType="int" resultType="String">
        select status from SmallCart where smallCartId = #{smallCartId}
    </select>

    <select id="getProductId" parameterType="int" resultType="int">
        select Product.productId
        from Product
                 inner join SmallCart SC on Product.productId = SC.productId
        where smallCartId = #{smallCartId}
    </select>

    <select id="getMakerId" parameterType="int" resultType="int">
        select makerId
        from SmallCart
                 inner join Product P on SmallCart.productId = P.productId
        where smallCartId = #{smallCartId}
    </select>

    <insert id="addSupport" parameterType="int">
        insert into Support (userId, makerId) values (#{userId}, #{makerId});
    </insert>

    <insert id="createOrder" parameterType="PostOrderReq">
        insert into OrderList (cartId, paymentMethodId, taker, phone, address, usePoint, isSupport, priceSum, finalPrice, isProtectNum, rewardPoint)
        values
        (#{cartId}, #{paymentMethodId}, #{taker}, #{phone}, #{address}, #{usePoint}, #{isSupport}, #{priceSum}, #{finalPrice}, #{isProtectNum}, #{rewardPoint});
        <selectKey keyProperty="orderListId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateCartStatus" parameterType="int">
        update Cart
        set status = 'N'
        where cartId = #{cartId};
    </update>

    <update id="updateSmallCartStatus" parameterType="int">
        update SmallCart
        set status = 'N'
        where smallCartId = #{smallCartId};
    </update>

    <update id="updateCouponStatus" parameterType="int">
        update Coupon
        set status = 'N'
        where couponId = #{couponId};
    </update>

    <update id="updatePoint" parameterType="int">
        update User set point = point + ${point} where userId = #{userId}
    </update>

    <update id="updateOrderCount" parameterType="int">
        update Product set orderCount = orderCount + 1 where productId = #{productId}
    </update>

    <select id="getUserId" parameterType="int" resultType="int">
        select User.userId
        from User
                 inner join Cart C on User.userId = C.userId
                 inner join OrderList OL on C.cartId = OL.cartId
        where orderListId = #{orderListId}
    </select>

    <select id="getOrders" parameterType="int" resultType="GetOrderRes">
        select orderListId,
               OD.smallCartId,
               date_format(OrderList.createdAt, '%Y.%m.%d') createdAt,
               finalPrice,
               thumbnailImageUrl, productName, makerName,
               OrderList.status
        from OrderList
                 inner join Cart C on OrderList.cartId = C.cartId
                 inner join SmallCart SC on C.cartId = SC.cartId
                 inner join OrderDetail OD on SC.smallCartId = OD.smallCartId
                 inner join ProductOption PO on OD.productOptionId = PO.productOptionId
                 inner join Product P on PO.productId = P.productId
                 inner join Maker M on P.makerId = M.makerId
        where userId = #{userId}
          and C.status = 'N'
          and SC.status = 'N'
        group by orderListId
    </select>

    <select id="getOrder" parameterType="int" resultType="GetOrderDetailRes">
        select orderListId,
               taker,
               phone,
               address,
               paymentMethodName,
               priceSum,
               finalPrice - OrderList.priceSum as deliveryTipAll,
               IF(isSupport='N', '안했어요', '했어요') as isSupport
        from OrderList
                 inner join PaymentMethod PM on OrderList.paymentMethodId = PM.paymentMethodId
        where OrderList.orderListId = #{orderListId}
    </select>

    <select id="getOrderDetailList" parameterType="int" resultType="OrderDetail">
        select thumbnailImageUrl,
               productName,
               SmallCart.smallCartId,
               (select group_concat(distinct ProductOption.content separator '\n')
                from ProductOption
                         inner join OrderDetail OD on ProductOption.productOptionId = OD.productOptionId
                         inner join SmallCart SC on OD.smallCartId = SC.smallCartId
                where SC.smallcartId = SmallCart.smallCartId) as productOption,
               count,
               request
        from SmallCart
                 inner join OrderDetail OD on SmallCart.smallCartId = OD.smallCartId
                 inner join OrderList OL on SmallCart.cartId = OL.cartId
                 inner join ProductOption PO on OD.productOptionId = PO.productOptionId
                 inner join Product P on PO.productId = P.productId
        where OL.orderListId = #{orderListId}
    </select>
</mapper>
