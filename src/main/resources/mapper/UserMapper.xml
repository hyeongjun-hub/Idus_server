<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.user.UserMapper">

    <insert id="createUser" parameterType="PostUserReq">
        insert into User (userName, email, password, gradeId, phone, profileImageUrl, point, birthday, gender,
        identityTest, isLogin, platform, fingerPrint, productId, alarm) VALUES (#{userName}, #{email}, #{password},
        DEFAULT, #{phone}, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{platform}, DEFAULT, DEFAULT, DEFAULT);

        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="getUsers" resultType="com.example.demo.src.user.model.entity.User">
        select userId,
               userName,
               email,
               password,
               gradeId,
               IFNULL(phone, '') phone,
               IFNULL(profileImageUrl, '') profileImageUrl,
               point,
               IFNULL(birthday, '') birthday,
               gender,
               identityTest,
               isLogin,
               platform,
               fingerPrint,
               IFNULL(productId, 1) productId,
               alarm,
               createdAt,
               updatedAt,
               status
        from User
    </select>

    <select id="getUser" parameterType="int" resultType="GetUserRes">
        select User.userId,
               userName,
               email,
               IFNULL(phone, '') phone,
               (select count(userId) from Coupon where userId = #{userId} and status = 'Y') as couponCount,
               User.gradeId,
               IFNULL(G.iconUrl, '') iconUrl,
               G.gradeName,
               IFNULL(profileImageUrl, '') as profileImageUrl,
               point,
               IFNULL(date_format(birthday, '%Y년 %m월 %d일'), '') birthday,
               gender,
               identityTest,
               fingerPrint,
               alarm
        from User
                 inner join Grade G on User.gradeId = G.gradeId
        where User.userId = #{userId}
          and User.status = 'Y'
    </select>

    <select id="getPlatform" parameterType="String" resultType="string">
        select platform from User where email = #{email}
    </select>

    <select id="getLoginUser" parameterType="PostLoginReq" resultType="User">
        select userId,
               userName,
               email,
               password,
               gradeId,
               IFNULL(phone, '')           phone,
               IFNULL(profileImageUrl, '') profileImageUrl,
               point,
               IFNULL(birthday, '')        birthday,
               gender,
               identityTest,
               isLogin,
               platform,
               fingerPrint,
               IFNULL(productId, 1)        productId,
               alarm,
               createdAt,
               updatedAt,
               status
        from User
        where email = #{email}
    </select>

    <select id="getUserId" parameterType="int" resultType="int">
        select userId from Address where addressId = #{addressId}
    </select>

    <select id="getUserIdByEmail" parameterType="string" resultType="int">
        select userId from User where email = #{email}
    </select>

    <select id="getPoint" parameterType="int" resultType="int">
        select point as point from User where userId = #{userId}
    </select>

    <select id="getCoupons" parameterType="int" resultType="GetCouponRes">
    </select>

    <select id="getPresents" parameterType="int" resultType="GetPresentRes">
    </select>

    <select id="getAddress" parameterType="int" resultType="GetAddressRes">
        select Address.addressId, addressName, address, Address.status from Address inner join User U on Address.userId = U.userId where U.userId = #{userId} and Address.status = 'Y'
    </select>

    <select id="getAddressStatus" parameterType="int" resultType="string">
        SELECT status FROM Address WHERE addressId = #{addressId}
    </select>

    <select id="getUserStatus" parameterType="int" resultType="string">
        SELECT status FROM User WHERE userId = #{userId}
    </select>

    <select id="getGrade" parameterType="int" resultType="GetGradeRes">
        select @gradeId := Grade.gradeId as gradeId,
       gradeName,
       rewardRate,
       CONCAT(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%c'),'월 예상 등급' ) as nextMonth,
       @required := FORMAT(required - useMoney, 0) as toBuy,
       @nextGrade := (select gradeName as nextGrade
        from Grade where Grade.gradeId = @gradeId + 1
        ) as nextGrade,
       CONCAT(DATE_FORMAT(LAST_DAY(NOW()), '%c월 %d일'), '까지 ', @required, '원 이상 더 사면, \n', @nextGrade, ' 등급!') as currentMonthLast
        from Grade
            inner join User U on Grade.gradeId = U.gradeId
        where userId = #{userId}
    </select>

    <select id="checkEmail" parameterType="String" resultType="int">
        select exists(select email from User where email = #{email})
    </select>

    <select id="checkPhone" parameterType="String" resultType="int">
        select exists(select phone from User where phone = #{phone})
    </select>

    <select id="checkAddress" parameterType="String" resultType="int">
        select exists(select address from Address where address = #{address})
    </select>

    <select id="checkAddressName" parameterType="String" resultType="int">
        select exists(select addressName from Address where addressName = #{addressName})
    </select>

    <update id="editUserName" parameterType="Object">
        UPDATE User SET userName = #{param2.userName} WHERE userId = #{param1}
    </update>

    <update id="editEmail" parameterType="Object">
        UPDATE User SET email=#{param2.email} WHERE userId = #{param1}
    </update>

    <update id="editProfileImageUrl" parameterType="Object">
        UPDATE User SET email=#{param2.profileImageUrl} WHERE userId = #{param1}
    </update>

    <update id="editBirthday" parameterType="Object">
        UPDATE User SET birthday=#{param2.birthday} WHERE userId = #{param1}
    </update>

    <update id="editGender" parameterType="Object">
        UPDATE User SET gender = #{param2.gender} WHERE userId = #{param1}
    </update>

    <update id="editFingerPrint" parameterType="Object">
        UPDATE User SET fingerPrint=#{param2.fingerPrint} WHERE userId = #{param1}
    </update>

    <update id="editAlarm" parameterType="Object">
        UPDATE User SET alarm = #{param2.alarm} WHERE userId = #{param1}
    </update>

    <update id="editPhone" parameterType="Object">
        UPDATE User SET phone=#{param2.phone} WHERE userId = #{param1}
    </update>

    <update id="delUser" parameterType="PostUserDelReq">
        update User set status = 'D' where userId = #{userId}
    </update>

    <insert id="createAddress" parameterType="int">
        INSERT INTO Address (userId) VALUES (#{userId})
    </insert>

    <update id="editAddress" parameterType="Object">
        Update Address SET addressName = #{param2.addressName}, address = #{param2.address} WHERE addressId = #{param1}
    </update>

    <update id="delAddress" parameterType="int">
        Update Address SET status = 'D' WHERE addressId = #{addressId}
    </update>

    <update id="logout" parameterType="int">
        UPDATE User SET isLogin = 'N' WHERE userId = #{userId}
    </update>

    <update id="updateIsLogin" parameterType="int">
        UPDATE User SET isLogin = 'Y' WHERE userId = #{userId}
    </update>

</mapper>
