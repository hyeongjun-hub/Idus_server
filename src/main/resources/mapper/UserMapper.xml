<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.src.user.UserMapper">

    <insert id="createUser" parameterType="PostUserReq">
        insert into User (userName, email, password, gradeId, phone, profileImageUrl, point, birthday, gender,
        identityTest, isLogin, platform, fingerPrint, productId, alarm) VALUES (#{userName}, #{email}, #{password},
        DEFAULT, #{phone}, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, #{platform}, DEFAULT, DEFAULT, DEFAULT);

        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="getUsers" resultType="com.example.demo.src.user.model.entity.User">
        select userId,
               userName,
               email,
               password,
               gradeId,
               CASE LENGTH(phone)
                   WHEN 11 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 4), '-', RIGHT(phone, 4))
                   WHEN 10 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 3), '-', RIGHT(phone, 4))
                   WHEN 0 THEN ''
                END phone,
               IFNULL(profileImageUrl, '') profileImageUrl,
               point,
               IFNULL(birthday, '') birthday,
               gender,
               identityTest,
               isLogin,
               platform,
               fingerPrint,
               IFNULL(productId, 1) productId,
               alarm,
               createdAt,
               updatedAt,
               status
        from User
    </select>

    <select id="getUser" parameterType="int" resultType="GetUserRes">
        select User.userId,
               userName,
               email,
               CASE LENGTH(phone)
                   WHEN 11 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 4), '-', RIGHT(phone, 4))
                   WHEN 10 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 3), '-', RIGHT(phone, 4))
                   WHEN 0 THEN ''
                   END phone,
               (select count(userId) from Coupon where userId = #{userId} and status = 'Y') as couponCount,
               User.gradeId,
               IFNULL(G.iconUrl, '') iconUrl,
               G.gradeName,
               IFNULL(profileImageUrl, '') as profileImageUrl,
               point,
               IFNULL(date_format(birthday, '%Y년 %m월 %d일'), '') birthday,
               gender,
               identityTest,
               fingerPrint,
               alarm
        from User
                 inner join Grade G on User.gradeId = G.gradeId
        where User.userId = #{userId}
          and User.status = 'Y'
    </select>

    <select id="getPlatform" parameterType="String" resultType="string">
        select platform from User where email = #{email} and User.status = 'Y'
    </select>

    <select id="getLoginUser" parameterType="PostLoginReq" resultType="User">
        select userId,
               userName,
               email,
               password,
               gradeId,
               CASE LENGTH(phone)
                   WHEN 11 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 4), '-', RIGHT(phone, 4))
                   WHEN 10 THEN CONCAT(LEFT(phone, 3), '-', MID(phone, 4, 3), '-', RIGHT(phone, 4))
                   WHEN 0 THEN ''
                   END phone,
               IFNULL(profileImageUrl, '') profileImageUrl,
               point,
               IFNULL(birthday, '')        birthday,
               gender,
               identityTest,
               isLogin,
               platform,
               fingerPrint,
               IFNULL(productId, 1)        productId,
               alarm,
               createdAt,
               updatedAt,
               status
        from User
        where email = #{email} and User.status = 'Y'
    </select>

    <select id="getUserIdByEmail" parameterType="string" resultType="int">
        select userId from User where email = #{email} and status = 'Y'
    </select>

    <select id="getUserPoint" parameterType="int" resultType="int">
        select point as userPoint from User where userId = #{userId}
    </select>

    <select id="getPoint" parameterType="int" resultType="com.example.demo.src.user.model.entity.Point">
        select pointListId,
               DATE_FORMAT(PointList.createdAt, '%Y.%m.%d') as createdAt,
        (select productName
                from PointList
                inner join OrderList O on PointList.orderListId = O.orderListId
                inner join Cart C2 on O.cartId = C2.cartId
                inner join SmallCart S on C2.cartId = S.cartId
                inner join Product P2 on S.productId = P2.productId
        limit 1) as productName,
        PointList.point as usePoint,
        (case
            when PointList.point >= 0 then CONCAT(G.gradeName, " 적립")
            else "사용"
        end) as pointString
        from PointList
        inner join OrderList OL on PointList.orderListId = OL.orderListId
        inner join Cart C on OL.cartId = C.cartId
        inner join User U on C.userId = U.userId
        inner join Grade G on U.gradeId = G.gradeId
        where U.userId = #{userId}
    </select>

    <select id="getCoupons" parameterType="int" resultType="GetCouponRes">
        select couponId,
               couponName,
               rate,
               amount,
               priceMin,
               DATE_FORMAT(startDate, '%Y.%m.%d')     as startDate,
               DATE_FORMAT(endDate, '%Y.%m.%d')       as endDate,
               TIMESTAMPDIFF(DAY, CURDATE(), endDate) as remainingDay,
               Coupon.status
        from Coupon
                 inner join User U on Coupon.userId = U.userId
                 inner join ProductCoupon PC on Coupon.productCouponId = PC.productCouponId
        where U.userId = #{userId}
    </select>

    <select id="getAddress" parameterType="int" resultType="Address">
        select Address.addressId
             , taker
             , CASE LENGTH(Address.phone)
                   WHEN 11
                       THEN CONCAT(LEFT(Address.phone, 3), '-', MID(Address.phone, 4, 4), '-', RIGHT(Address.phone, 4))
                   WHEN 10
                       THEN CONCAT(LEFT(Address.phone, 3), '-', MID(Address.phone, 4, 3), '-', RIGHT(Address.phone, 4))
                   WHEN 0 THEN ''
            END phone
             , address
        from Address
                 inner join User U on Address.userId = U.userId
        where U.userId = #{userId}
    </select>

    <select id="getAddressStatus" parameterType="int" resultType="string">
        SELECT status FROM Address WHERE addressId = #{addressId}
    </select>

    <select id="getUserStatus" parameterType="int" resultType="string">
        SELECT status FROM User WHERE userId = #{userId}
    </select>

    <select id="getGrade" parameterType="int" resultType="GetGradeRes">
        select @gradeId := Grade.gradeId as gradeId,
       gradeName,
       rewardRate,
       CONCAT(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%c'),'월 예상 등급' ) as nextMonth,
       @required := FORMAT(required - useMoney, 0) as toBuy,
       @nextGrade := (select gradeName as nextGrade
        from Grade where Grade.gradeId = @gradeId + 1
        ) as nextGrade,
       CONCAT(DATE_FORMAT(LAST_DAY(NOW()), '%c월 %d일'), '까지 ', @required, '원 이상 더 사면, \n', @nextGrade, ' 등급!') as currentMonthLast
        from Grade
            inner join User U on Grade.gradeId = U.gradeId
        where userId = #{userId}
    </select>

    <select id="getLikeProducts" parameterType="int" resultType="GetProductRes">
        select Product.productId,
               Product.categoryId,
               productName,
               makerName,
               IFNULL(thumbnailImageUrl, '') as thumbnailImageUrl,
               price,
               discountRate,
               tag,
               (select AVG(star) from Review where Product.productId = Review.productId) as star,
               (select COUNT(star) from Review where Product.productId = Review.productId) as reviewCount,
               IFNULL((select content from Review R where R.productId=Product.productId limit 1), '') as review,
               vip
        from Product
                 inner join Maker M on Product.makerId = M.makerId
                 inner join LikeList LL on Product.productId = LL.productId
                 inner join User U on LL.userId = U.userId
        where Product.status = 'Y' and LL.userId = #{userId} and LL.status = 'Y'
    </select>

    <select id="getFollowMakers" parameterType="int" resultType="GetFollowRes">
        select distinct followId,
                        thumbnailImageUrl,
                        makerProfileImageUrl,
                        makerName,
                        profileDetail
        from Maker
                 inner join Follow F on Maker.makerId = F.makerId
                 inner join Product P on Maker.makerId = P.makerId
        where userId = #{userId}
    </select>

    <select id="checkEmail" parameterType="String" resultType="int">
        select exists(select email from User where email = #{email} and User.status = 'Y')
    </select>

    <select id="checkPhone" parameterType="String" resultType="int">
        select exists(select phone from User where phone = #{phone} and User.status = 'Y')
    </select>

    <update id="editUserName" parameterType="Object">
        UPDATE User SET userName = #{param2.userName} WHERE userId = #{param1}
    </update>

    <update id="editEmail" parameterType="Object">
        UPDATE User SET email=#{param2.email} WHERE userId = #{param1}
    </update>

    <update id="editProfileImageUrl" parameterType="Object">
        UPDATE User SET email=#{param2.profileImageUrl} WHERE userId = #{param1}
    </update>

    <update id="editBirthday" parameterType="Object">
        UPDATE User SET birthday=#{param2.birthday} WHERE userId = #{param1}
    </update>

    <update id="editGender" parameterType="Object">
        UPDATE User SET gender = #{param2.gender} WHERE userId = #{param1}
    </update>

    <update id="editFingerPrint" parameterType="Object">
        UPDATE User SET fingerPrint=#{param2.fingerPrint} WHERE userId = #{param1}
    </update>

    <update id="editAlarm" parameterType="Object">
        UPDATE User SET alarm = #{param2.alarm} WHERE userId = #{param1}
    </update>

    <update id="editPhone" parameterType="Object">
        UPDATE User SET phone=#{param2.phone} WHERE userId = #{param1}
    </update>

    <update id="delUser" parameterType="PostUserDelReq">
        update User set status = 'D' where userId = #{userId}
    </update>

    <insert id="createAddress" parameterType="int">
        INSERT INTO Address (userId) VALUES (#{userId})
        <selectKey keyProperty="addressId" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="setAddressInfo" parameterType="Object">
        Update Address SET taker = #{param2.userName}, phone = #{param2.phone} WHERE addressId = #{param1}
    </update>

    <update id="editAddress" parameterType="PatchAddressReq">
        Update Address SET address=#{address} WHERE addressId = #{addressId}
    </update>

    <update id="editTaker" parameterType="PatchAddressReq">
        UPDATE Address SET taker=#{taker} WHERE addressId = #{addressId}
    </update>

    <update id="editAddressPhone" parameterType="PatchAddressReq">
        UPDATE Address SET phone=#{phone} WHERE addressId = #{addressId}
    </update>

    <update id="logout" parameterType="int">
        UPDATE User SET isLogin = 'N' WHERE userId = #{userId}
    </update>

    <update id="updateIsLogin" parameterType="int">
        UPDATE User SET isLogin = 'Y' WHERE userId = #{userId}
    </update>

    <select id="getTakeGift" parameterType="int" resultType="Gift">
        select giftId,
               productName,
               thumbnailImageUrl,
               makerName,
               priceAll,
               count,
               Gift.status,
               U.userName,
               DATE_FORMAT(Gift.createdAt, '%Y.%m.%d') as createdAt
        from Gift
                 inner join OrderList OL on Gift.orderListId = OL.orderListId
                 inner join Cart C on OL.cartId = C.cartId
                 inner join User U on C.userId = U.userId
                 inner join SmallCart SC on C.cartId = SC.cartId
                 inner join Product P on SC.productId = P.productId
                 inner join Maker M on P.makerId = M.makerId
        where Gift.takerId = #{userId}
          and OL.status = 'Y'
          and (SC.status = 'N' or SC.status = 'R');

    </select>

    <select id="getGiveGift" parameterType="int" resultType="Gift">
        select giftId,
               productName,
               thumbnailImageUrl,
               makerName,
               priceAll,
               count,
               Gift.status,
               DATE_FORMAT(Gift.createdAt, '%Y.%m.%d')                         as createdAt,
               (select User.userName from User where User.userId = OL.takerId) as userName
        from Gift
                 inner join OrderList OL on Gift.orderListId = OL.orderListId
                 inner join Cart C on OL.cartId = C.cartId
                 inner join User U on C.userId = U.userId
                 inner join SmallCart SC on C.cartId = SC.cartId
                 inner join Product P on SC.productId = P.productId
                 inner join Maker M on P.makerId = M.makerId
        where U.userId = #{userId}
          and OL.isGift = 'Y'
          and OL.status = 'Y'
          and (SC.status = 'N' or SC.status = 'R');

    </select>

</mapper>
